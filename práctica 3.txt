1 - 
#= en Object: Responde si el receptor y el argumento representan el mismo objeto. Se puede redefinir en cualquier subclase. En su declaración invoca el #==.
#== en ProtoObject: Primitivo. Responde si el receptor y el argumento son los mismos objeto (tiene el mismo puntero de objeto). No se redefine el mensaje == en cualquier otra clase! Esencial. No hay búsqueda. No se puede anular en ninguna subclase.

No se puede saber, desde la ejecución, si se ejecuta el #= o el #==. Sólo se puede saber si se hace debug. 

Que un método esté en el protocolo private implicaría que solo son accesibles desde la clase que los define. En smalltalk todos los métodos son públicos por defecto. Los privados sólo indican que no deberían modificarse, pero no lo evitan de hecho.

La implementacion de initialize es vacía. Las subclases pueden redefinir este método para realizar inicializaciones en la creación de instancias.Esto permite que si una clase no lo define, pueda instanciarse igual un objeto, ya que invoca a un initialize igual. 

Flechas hacia arriba indican que ese mensaje está definido en su clase padre, y hacia abajo, que está definido en una de sus subclases.

2 - 
Object subclass: #Document
	instanceVariableNames: 'title body'
	classVariableNames: ''
	package: 'Document'
  
#title
  ^ title.
  
#title: aTitle
  title := aTitle.
  
#body
  ^ body.

#body: aBody
  body := aBody.

#size
  "retorna el tamaño del documento que es la suma del tamaño del título, el
  tamaño del body y el overhead del documento que siempre es el 10% del body"

  ^ self body size + self title size + (self body size * 0.1).

#addLine: aLine
  "agrega (concatena) al body la linea aLine"
	self body: self body, aLine.

Método de clase
#titled: aString
  "Retorna una nueva instancia de Document, cuyo título es aString"

  ^ self new title: aString;
		body:''.

a. doc es una instancia de la clase Document.
b. es de la clase Float.
c. devuelve la clase a la que pertenece la instancia doc. Devuelve Document.
d. la línea 8 evalúa si la clase de la instancia doc es Document.

3 - |nrb rab|
nrb = NonRechargeableBattery new.
nrb consume: 70. "La bateria queda en 30"
nrb consume: 35. "Imprime 'Bateria descargada', la bateria queda en 30"

rab := RechargeableAlkalineBattery new.
rab consume: 70. "La bateria queda en 30"
rab consume: 35. "Imprime 'Recharging alkaline battery...', la bateria queda en 100"

4 - Object subclass: #Profile
	instanceVariableNames: 'name likes posts karma'
	classVariableNames: ''
	package: 'ProfileAndKarma'

#name: aName
 name:= aName.

#name
 ^name.

#likes: aNumber
 likes:= aNumber.
 
#likes
 ^likes.

#posts: aNumber
 posts:= aNumber.

#posts
 ^posts.

#karma: aNumber
 karma:= aNumber.

#karma
 ^karma.

#like
  self likes: self likes + 1.

#post
 self posts: self posts + 1.

#initialize
	^self name: ' '; posts: 0; likes: 0; karma: 0.

Profile class>> newProfile: aName
	^self new
	name: aName;
	posts: 0;
	likes: 0;
	karma: 0;
	yourself. 

#calcKarma
	|aux|
	aux:= (self posts // self likes) asInteger.
	(aux between: 31 and: 50)
	ifTrue: [ self karma: self karma + 2 ].
	(aux > 51)
	ifTrue: [ self karma: self karma + 3 ].
	self posts: 0; likes: 0.


-------EN PLAYGROUND------------------------
user:= Profile newProfile: 'Pepe'.
user name.
user posts.
user likes.
user karma.
user like.
user post.
user calcKarma. 

5 - 
Profile subclass: #Gold
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'ProfileAndKarma'
	
Profile subclass: #Silver
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'RedSoc'
	
Profile>> #calcKarma: aNumber
	(aNumber between: 31 and: 50)
	ifTrue: [ self karma: self karma + 2 ].
	(aNumber > 51)
	ifTrue: [ self karma: self karma + 3 ].
	self posts: 0; likes: 0.
	  
Gold>> #calcKarma
	|aux|
	aux:= (posts * likes / Float halfPi) asInteger.
	super calcKarma: aux. 
Silver>> #calcKarma
	|aux|
	aux:= (posts * likes / Float pi) asInteger.
	super calcKarma: aux.
	
-------EN PLAYGROUND------------------------
userA:= Gold new.
userA posts.
userA likes.
userA karma.
userA like.
userA post.
userA calcKarma. 

userB:= Silver new.
userB posts.
userB likes.
userB karma.
userB like.
userB post.
userB calcKarma.

1. ¿Qué modificaciones o extensiones debe hacer a la resolución del ejercicio 4?
Se deben agregar las clase Gold y Silver, extendidas de usuario, definir en cada subclase el método #calcKarma, para que lo realicen directamente las subclases de Profile, agregar al método calcKarma en Profile, un parámetro,que reciba el resultado del cálculo de cada subclase, para evitar el duplicado de código y desde las sublases invocarlo y enviarle el valor calculado.
2. ¿Qué comportamiento tienen en común los usuarios Gold y Silver?
El propio de Profile.
3. La superclase de ambos usuarios, ¿puede instanciarse?
Si, podría porque tiene su método de clase y su inicialize, pero no podría calcular el Karma.
4. En el caso en que no pueda instanciarse, ¿cuál es la manera en Smalltalk de definir una clase de ese tipo?
Abstracta? Se crea vacía, sin métodos. 

6-
Object subclass: #Carrito
	instanceVariableNames: 'cantProductos totalCompra'
	classVariableNames: ''
	package: 'Carrito'

#cantProductos: aNumber
 cantProductos:= aNumber. 
 
#cantProductos
 ^ cantProductos. 
 
#totalCompra: aNumber
 totalCompra:= aNumber.

#totalCompra
 ^ totalCompra. 
 
#initialize
 ^self cantProductos: 0; totalCompra: 0.

#addProd: aPrice
	self cantProductos: self cantProductos + 1.
	self totalCompra: self totalCompra + aPrice.

#calcTotal
	(self cantProductos > 10)
	ifTrue: [ self totalCompra: self totalCompra - (self totalCompra * 10 percent) ].
	(self totalCompra > 10000)
	ifTrue: [ self totalCompra: self totalCompra - (self totalCompra * 5 percent)].
	
-------EN PLAYGROUND------------------------

compra:= Carrito new.
compra cantProductos.
compra totalCompra.
compra addProd: 100000.
compra calcTotal.  

7-
No sería necesaria la redefinición de #position en WalkingBrushRobot, porque se implementa igual en BGSRobot, y se invocaría igual.
Se definen tres constructores:
#newWithPosition: - instancia e inicializa al robot en una posición que llega por parámetro, con la batería llena.
#withBattery - instancia e inicializa un robot con la carga de su batería llena.
#withoutBattery - instancia e inicializa un robot con una EndlessBattery, sin carga.
El protocolo en común de Battery y EndlessBattery es consume. Aunque los métodos que contiene, no realizan lo mismo.
Existe polimorfismo cuando un mismo mensaje responde diferente, dependiendo de la entidad que lo invoque. Cada objeto sabe cómo debe ejecutar su método particular. No necesariamente los objetos deben pertenecer a la misma jerarquía, sólo deben conocer el método, que podría estar definido en su propia clase, o puede modificar uno definido en su propia jerarquía también. El método se comporta de una determinada manera, dependiendo de quién lo invoque.
WalkingBrushRobot hereda de:
ProtoObject : no tiene variables de instancia
Object : no tiene variables de instancia
BGSRobot :'id body'
OTFRobot : 'commands semaphore'
En #body: se asigna a la variable body un aRobotBody, y setea la variable bot de body como self. El método #bodyClass devuelve un objeto de la clase BGSRobotBody, que tiene como variables de instancia 'bot cell heading partsDict'. 
La variable se inicializa seteando el body con el resultado del llamado al método #bodyClass new, que devuelve una instancia de BGSRobotBody.
Para inicializar con otros tipos de body, podría cambiar el objeto al que hace referencia bodyClass. Tambíen podría definir un constructor distinto, que llame a otra clase, no a bodyClass.

8-
Object subclass: #SistemaMonitoreo
	instanceVariableNames: 'mediciones'
	classVariableNames: ''
	package: 'Mediciones'
	
SistemaMonitoreo subclass: #Medicion
	instanceVariableNames: 'absValue relValue timestamp'
	classVariableNames: ''
	package: 'Mediciones'
	
Medicion>> #absValue: aValue
	absValue:= aValue.

Medicion>> #absValue
	^absValue.

Medicion>> #relValue: aValue
	relValue:= aValue.

Medicion>> #relValue
	^relValue.
	
Medicion>> #timestamp: aClock
	timestamp:= aClock.

Medicion>> #timestamp
	^timestamp.

Medicion class>> newWithValue: aValue and: aClock
	^self new
	absValue: aValue;
	relValue:0;
	timestamp: aClock;
	yourself.

Medicion class>> newWithValue: aValue and:otherValue and: aClock
	^self new
	absValue: aValue;
	relValue: otherValue;
	timestamp: aClock;
	yourself.

SistemaMonitoreo>> #mediciones: aCollection
	mediciones:= aCollection. 

SistemaMonitoreo>> #mediciones
	^mediciones.

SistemaMonitoreo>> #initialize
	mediciones:= OrderedCollection new.
	
SistemaMonitoreo>> #addAbsoluteTemperature: aValue clock: aNumber
"agrega una medicion absoluta"
	self mediciones add: (Medicion newWithValue: aValue and: aNumber).
	
SistemaMonitoreo>> #addDiferentialTemperature: aValue clock: aNumber
"agrega una medicion diferencial"
	|aux act|
	aux:= self mediciones last absValue.
	act:= aux + aValue.
	self mediciones addLast:(Medicion newWithValue: act and: aValue and: aNumber)

	
SistemaMonitoreo>> #currentTemperature
"retorna la temperatura actual"
	^self mediciones last absValue.
	
SistemaMonitoreo>> #allTemperatureValues
"retorna una colección con los valores de temperatura"
	^self mediciones do: [:med | Transcript show: med absValue].
	
-------EN PLAYGROUND------------------------

medicion:= SistemaMonitoreo new.
medicion mediciones.
medicion addAbsoluteTemperature: 80 clock: 1.
medicion addDiferentialTemperature: 70 clock: 2.
medicion currentTemperature.
medicion allTemperatureValues.
