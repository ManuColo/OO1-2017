1 - 
#squareOfSize: aSize
    "Realiza un cuadrado con una esquina en su posición actual y de lado aSize."
    4 timesRepeat: [
        self move: aSize.
        self quarter.
    ].

#squareOfSize: aSize at: aPoint
    "Realiza un cuadrado con una esquina en el punto aPoint y de lado aSize."
    self position: aPoint;
         squareOfSize: aSize.
    
#squareAtHomeOfSize: aSize
    "Realiza un cuadrado con una esquina en 25@25 y de lado aSize."
    self position: (25@25);
         squareOfSize: aSize.

#rotatedSquareOfSize: aSize
    "Realiza un cuadrado con una esquina en su posición actual, de lado aSize, rotado 45 grados."
    self direction: self direction + 45;
         squareOfSize: aSize.
         
#rotatedSquareOfSize: aSize at:aPoint
    "Realiza un cuadrado con una esquina en aPoint, de lado aSize, rotado 45 grados."
    self direction: self direction + 45;
         squareOfSize: aSize at: aPoint.

3 - 
  1 -
  Object subclass: #PatrolCouple
	instanceVariableNames: 'patrol sniper'
	classVariableNames: ''
	package: 'BotArena'
    
MÉTODOS DE INSTANCIA:
#patrol
	^patrol
	
#patrol: aRobot
    "Asigna un robot a sniper"
    patrol := aRobot.

#sniper
	^sniper
	
#sniper: aRobot
    "Asigna un robot a sniper"
    sniper := aRobot.

#patrol: aPatrolRobot sniper: aSniperRobot
  "Toma dos robots como parámetros y los guarda en las variables de instancia que correspondan"
	self patrol: aPatrolRobot;
	sniper: aSniperRobot.

  2 - Creo desde el mapa los robots "robot1 y robot2" y después en el playgroynd escribo:
  |patrolCouple bot1 bot2|
bot1 := robot1.
bot2 := robot2.
patrolCouple := PatrolCouple new.
patrolCouple patrol: bot1 sniper: bot2.

  3 - El agregado de este metodo permite reducir las últimas dos líneas del punto anterior a "patrolCouple := PatrolCouple newPatrol: bot1 sniper: bot2."

MÉTODO DE CLASE:
#newPatrol: aPatrolRobot sniper: aSniperRobot
  "Crea e inicializa un PatrolCouple con robots."

  ^ self new patrol: aPatrolRobot; sniper: aSniperRobot;
  yourself.
  
4 - 
  #reset
  "Ambos robots se posicionan enfrentados a distancia 5 uno del otro (uno mira al
    south y el otro al north, uno de ellos posicionado en 20@20"

  self patrol north;
    position: (20@25).
  self sniper south;
    position: (20@20).
  
  Para regularPatrol defino spin en WalkingBrushRobot
  #spin
      4 timesRepeat: [
        self quarter.
      ].
  
  #regularPatrol
  "patrol hace un cuadrado de lado 10 rotado 45 grados alrededor de sniper,
    sniper en el centro gira en sentido de las agujas del reloj."
      self patrol rotatedSquareOfSize: 10 at: ((self sniper position x - 10)@(self sniper position y)).
      self sniper spin.
  
  
  #regularPatrolTrace
  "Similar a regularPatrol pero patrol realiza un trazo con el brush"

      self patrol brushDown.
      self regularPatrol.
      self patrol brushUp.

  #doTheRegularPatrol
  |sniperPosition|
  "Los guardias repiten regularPatrol 5 veces, pero luego de cada una se corren
  5 hacia el este. Considere usar bateria con suficiente carga"
  sniperPosition := self sniper position.
  5 timesRepeat: [
      sniperPosition := sniperPosition + (5@0).
      self sniper position: sniperPosition.
      self regularPatrol.
  ]
  
  #doTheRegularPatrolTrace
  "Similar a doTheRegularPatrol pero cada robot deja un trazo en la arena con
  el brush"

  self patrol brushDown.
  self doTheRegularPatrol.
  self patrol brushUp.

##############  Comandos de prueba

|patrolCouple bot1 bot2 endlessBattery|
endlessBattery := EndlessBattery new.
robot2 battery: endlessBattery.
bot1 := robot1.
bot2 := robot2.
bot1 brushDown.
bot2 brushDown.
patrolCouple := PatrolCouple newPatrol: bot1 sniper: bot2.
patrolCouple regularPatrol.
patrolCouple regularPatrolTrace.
patrolCouple doTheRegularPatrol.
patrolCouple doTheRegularPatrolTrace.


5 - Object subclass: #CastleWatch
	instanceVariableNames: 'northWatch southWatch eastWatch westWatch'
	classVariableNames: ''
	package: 'BotArena'

#eastWatch
    ^eastWatch.

#northWatch
    ^northWatch.
  
#southWatch
    ^southWatch.
    
#westWatch
    ^westWatch.
    
#eastWatch: aRobot
    eastWatch:= aRobot.

#northWatch: aRobot
    northWatch:= aRobot.
  
#southWatch: aRobot
    southWatch:= aRobot.
    
#westWatch: aRobot
    westWatch:= aRobot.
    
Método de clase
#northWatch: aRobotN southWatch: aRobotS eastWatch: aRobotE westWatch: aRobotW
   self
     new;
     northWatch: aRobotN;
     southWatch: aRobotS;
     eastWatch: aRobotE;
     westWatch: aRobotW.
   ^self.

#regularWatch
"Los robots realizan un cuadrado de lado 3 en su correspondiente flanco."
self eastWatch brushDown; squareOfSize: 3.
self northWatch brushDown; squareOfSize: 3.
self southWatch brushDown; squareOfSize: 3.
self westWatch brushDown; squareOfSize: 3.

Defino métodos para posicionar los robots para el método siguiente
#posEast
	self eastWatch position: (15@31); north.
#posNorth
	self northWatch position: (21@15); east.
#posSouth
	self southWatch position: (21@34); east.
#posSouth
	self southWatch position: (21@34); east.
	
#paranoicWatch
"cada robot realiza un recorrido del flanco completo, dibujando un rectangulo de 4x10"
self posEast; posNorth; posSouth; posWest.   
2 timesRepeat: [ self eastWatch trace: 9; quarter; trace:3; quarter.
		self northWatch trace: 9; quarter; trace:3; quarter.
		self southWatch trace: 9; quarter; trace:3; quarter.
		self westWatch trace: 9; quarter; trace:3; quarter.]

6 - 
DEFINICIÓN CLASE:
Object subclass: #Wallpost
	instanceVariableNames: 'likes featured text'
	classVariableNames: ''
	package: 'WallPost'
	
#text
    "Retorna el texto descriptivo de la publicación"
    ^ text.
#text: aText
    "Setea el texto descriptivo de la publicación"
    text:= aText.
#likes
    "Retorna la cantidad de “me gusta”"
    ^ likes.
#like
    "Incrementa la cantidad de likes en uno"
    self likes: self likes + 1.
#dislike
    "Decrementa la cantidad de likes en uno. Si ya es 0, no hace nada"
    ((self likes) > 0) 
	ifTrue: [
        self likes: self likes - 1.
    ].
#featured
    "Retorna el estado de “destacado” de la publicacion"
    ^ featured.
#featured: aMark
    "Setea el estado de destacado de la publicación"
    featured := aMark.
#isFeatured
    "Retorna true si el post esta marcado como destacado, false en caso contrario"
    ^self featured.
#toggleFeatured
    "Cambia el post del estado destacado a no destacado y viceversa "
    (self featured= true)
		ifTrue: [ self featured: false ] 
		ifFalse: [ self featured: true ]. 
initialize
"Inicializa el estado de las variables de instancia del Wallpost. Luego de la invocación el Wallpost debe tener como texto: “Undefined post”, no debe estar marcado como destacado y la cantidad de “Me gusta” deben ser 0."
    self
        text: 'Undefined post';
        featured: false;
        likes: 0.
