1 - 
#squareOfSize: aSize
    "Realiza un cuadrado con una esquina en su posición actual y de lado aSize."
    4 timesRepeat: [
        self move: aSize.
        self quarter.
    ].

#squareOfSize: aSize at: aPoint
    "Realiza un cuadrado con una esquina en el punto aPoint y de lado aSize."
    self position: aPoint;
         squareOfSize: aSize.
    
#squareAtHomeOfSize: aSize
    "Realiza un cuadrado con una esquina en 25@25 y de lado aSize."
    self position: (25@25);
         squareOfSize: aSize.

#rotatedSquareOfSize: aSize
    "Realiza un cuadrado con una esquina en su posición actual, de lado aSize, rotado 45 grados."
    self direction: self direction + 45;
         squareOfSize: aSize.
         
#rotatedSquareOfSize: aSize at:aPoint
    "Realiza un cuadrado con una esquina en aPoint, de lado aSize, rotado 45 grados."
    self direction: self direction + 45;
         squareOfSize: aSize at: aPoint.

3 - 
  1 -
  Object subclass: #PatrolCouple
	instanceVariableNames: 'patrol sniper'
	classVariableNames: ''
	package: 'BotArena'
    
MÉTODOS DE INSTANCIA:
#patrol
	^patrol
	
#patrol: aRobot
    "Asigna un robot a sniper"
    patrol := aRobot.

#sniper
	^sniper
	
#sniper: aRobot
    "Asigna un robot a sniper"
    sniper := aRobot.

#patrol: aPatrolRobot sniper: aSniperRobot
  "Toma dos robots como parámetros y los guarda en las variables de instancia que correspondan"
	self patrol: aPatrolRobot;
	sniper: aSniperRobot.

  2 - Creo desde el mapa los robots "robot1 y robot2" y después en el playgroynd escribo:
  |patrolCouple bot1 bot2|
bot1 := robot1.
bot2 := robot2.
patrolCouple := PatrolCouple new.
patrolCouple patrol: bot1 sniper: bot2.

  3 - El agregado de este metodo permite reducir las últimas dos líneas del punto anterior a "patrolCouple := PatrolCouple newPatrol: bot1 sniper: bot2."

MÉTODO DE CLASE:
#newPatrol: aPatrolRobot sniper: aSniperRobot
  "Crea e inicializa un PatrolCouple con robots."

  ^ self new patrol: aPatrolRobot; sniper: aSniperRobot;
  yourself.
  
4 - 
  #reset
  "Ambos robots se posicionan enfrentados a distancia 5 uno del otro (uno mira al
    south y el otro al north, uno de ellos posicionado en 20@20"

  self patrol north;
    position: (20@25).
  self sniper south;
    position: (20@20).
  
  Para regularPatrol defino spin en WalkingBrushRobot
  #spin
      4 timesRepeat: [
        self quarter.
      ].
  
  #regularPatrol
  "patrol hace un cuadrado de lado 10 rotado 45 grados alrededor de sniper,
    sniper en el centro gira en sentido de las agujas del reloj."
      self patrol rotatedSquareOfSize: 10 at: ((self sniper position x - 10)@(self sniper position y)).
      self sniper spin.
  
  
  #regularPatrolTrace
  "Similar a regularPatrol pero patrol realiza un trazo con el brush"

      self patrol brushDown.
      self regularPatrol.
      self patrol brushUp.

  #doTheRegularPatrol
  |sniperPosition|
  "Los guardias repiten regularPatrol 5 veces, pero luego de cada una se corren
  5 hacia el este. Considere usar bateria con suficiente carga"
  sniperPosition := self sniper position.
  5 timesRepeat: [
      sniperPosition := sniperPosition + (5@0).
      self sniper position: sniperPosition.
      self regularPatrol.
  ]
  
  #doTheRegularPatrolTrace
  "Similar a doTheRegularPatrol pero cada robot deja un trazo en la arena con
  el brush"

  self patrol brushDown.
  self doTheRegularPatrol.
  self patrol brushUp.

##############  Comandos de prueba

|patrolCouple bot1 bot2 endlessBattery|
endlessBattery := EndlessBattery new.
robot2 battery: endlessBattery.
bot1 := robot1.
bot2 := robot2.
bot1 brushDown.
bot2 brushDown.
patrolCouple := PatrolCouple newPatrol: bot1 sniper: bot2.
patrolCouple regularPatrol.
patrolCouple regularPatrolTrace.
patrolCouple doTheRegularPatrol.
patrolCouple doTheRegularPatrolTrace.


5 - Object subclass: #CastleWatch
	instanceVariableNames: 'northWatch southWatch eastWatch westWatch'
	classVariableNames: ''
	package: 'BotArena'

#eastWatch
    ^eastWatch.

#northWatch
    ^northWatch.
  
#southWatch
    ^southWatch.
    
#westWatch
    ^westWatch.
    
#eastWatch: aRobot
    eastWatch:= aRobot.

#northWatch: aRobot
    northWatch:= aRobot.
  
#southWatch: aRobot
    southWatch:= aRobot.
    
#westWatch: aRobot
    westWatch:= aRobot.
    
Método de clase
newEast: robot1 north: robot2 south: robot3 west: robot4
"Toma dos robots como parámetros y los guarda en las variables de instancia que correspondan"
	^ self new
		eastWatch: robot1; northWatch: robot2; southWatch: robot3; westWatch: robot4; 
		yourself.

#regularWatch
"Los robots realizan un cuadrado de lado 3 en su correspondiente flanco."
self eastWatch brushDown; squareOfSize: 3.
self northWatch brushDown; squareOfSize: 3.
self southWatch brushDown; squareOfSize: 3.
self westWatch brushDown; squareOfSize: 3.

Defino métodos para posicionar los robots para el método siguiente
#posEast
	self eastWatch position: (15@31); north.
#posNorth
	self northWatch position: (21@15); east.
#posSouth
	self southWatch position: (21@34); east.
#posSouth
	self southWatch position: (21@34); east.
	
#paranoicWatch
"cada robot realiza un recorrido del flanco completo, dibujando un rectangulo de 4x10"
self posEast; posNorth; posSouth; posWest.   
2 timesRepeat: [ self eastWatch trace: 9; quarter; trace:3; quarter.
		self northWatch trace: 9; quarter; trace:3; quarter.
		self southWatch trace: 9; quarter; trace:3; quarter.
		self westWatch trace: 9; quarter; trace:3; quarter.]
		
##############  Comandos de prueba
guardia:= CastleWatch newEast: uno north: dos south: tres west: cuatro. 
guardia regularWatch.
guardia paranoicWatch. 


6 - 
DEFINICIÓN CLASE:
Object subclass: #Wallpost
	instanceVariableNames: 'likes featured text'
	classVariableNames: ''
	package: 'WallPost'
	
#text
    "Retorna el texto descriptivo de la publicación"
    ^ text.
#text: aText
    "Setea el texto descriptivo de la publicación"
    text:= aText.
#likes
    "Retorna la cantidad de “me gusta”"
    ^ likes.
#like
    "Incrementa la cantidad de likes en uno"
    self likes: self likes + 1.
#dislike
    "Decrementa la cantidad de likes en uno. Si ya es 0, no hace nada"
    ((self likes) > 0) 
	ifTrue: [
        self likes: self likes - 1.
    ].
#featured
    "Retorna el estado de “destacado” de la publicacion"
    ^ featured.
#featured: aMark
    "Setea el estado de “destacado” de la publicación"
    featured := aMark.
#isFeatured
    "Retorna true si el post esta marcado como destacado, false en caso contrario"
    ^self featured.
#toggleFeatured
    "Cambia el post del estado destacado a no destacado y viceversa "
    (self featured= true)
		ifTrue: [ self featured: false ] 
		ifFalse: [ self featured: true ]. 
#initialize
"Inicializa el estado de las variables de instancia del Wallpost. Luego de la invocación el Wallpost debe tener como texto: “Undefined post”, no debe estar marcado como destacado y la cantidad de “Me gusta” deben ser 0."
    self
        text: 'Undefined post';
        featured: false;
        likes: 0.
	
##############  Comandos de prueba
post:= Wallpost new.
post likes. (con Print)
post featured. (con Print)
post text. (con Print)
post like.
post dislike.
post isFeatured.
post  toggleFeatured. 

7 - 
1. ¿En qué difieren las instanciaciones? WallpostUI on: (Wallpost new). 
La primera necesita de un parámetro. La segunda ejecuta directamente el new.
2. En el ej. anterior ud.implementó el método #initialize, pero, ¿quien lo invoca? Ayuda: coloque un breakpoint en el método initialize para ver quién lo invoca. Ayuda de la ayuda: para poner un breakpoint agregue la sentencia self halt. al código del método #initialize. 
El método initialize lo ejecuta automáticamente el new de Wallpost.

8 - 
1. ¿Los nombres de clase comienzan con minúscula o mayúscula?
Los nombres de clase comienzan con mayúscula.
2. ¿Cómo se escriben los nombres de métodos?
Comienzan con minúscula, y si el nombre está compuesto por más de una palabra, la primera letra de cada una, en mayúscula.
3. ¿Para qué se usan los protocolos?
Para agrupar y organizar métodos.
4. ¿Qué pasa si un método no tiene un protocolo asignado?
Figura como aún no clasificado, pero se puede utilizar igual.
5. Busque la clase DateAndTime y:
a. Mencione al menos 3 clases a las que se haga referencia desde el código de la clase DateAndTime.
Duration, DosTimestamp, Time.
b. Busque el método más largo de la clase. ¿Qué pasa en el browser cuando aparece un método largo? ¿Qué conclusión puede sacar al respecto?
Aparece una advertencia que indica todos los métodos que tienen #longMethodSize número de sentencias, no cuenta el número de líneas, sino de sentencias que ejecuta. Es conveniente hacer métodos más modularizados. 
c. Busque un método que haga uso de variables temporales, y dos métodos que usen de instancia. Discuta con el ayudante sobre el uso que se les da a las variables temporales.
Las variables temporales sirven para la ejecución de un método, pero no se conservan fuera de éste. Se las utiliza cuando se necesita guardar un valor específico en un momento dado, en cambio las de instancia, si se modifican, se mantiene tal valor, el estado del objeto.
